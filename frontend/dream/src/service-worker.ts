/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core'
import { ExpirationPlugin } from 'workbox-expiration'
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching'
import { registerRoute } from 'workbox-routing'
import { NetworkOnly, StaleWhileRevalidate } from 'workbox-strategies'

declare const self: ServiceWorkerGlobalScope

clientsClaim()

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST)

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$')
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false
    }

    // Return true to signal that we want to use the handler.
    return true
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
)

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.endsWith('.png'),
  // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 })
    ]
  })
)

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting()
  }
})

// Any other custom service worker logic can go here.

self.addEventListener('fetch', (event) => {
  const checkurl = event.request.url
  const currentUrl = event.request.referrer
  console.log('checkurl', checkurl)
  console.log('currenturl', currentUrl)
  console.log('event request', event.request)

  if (
    currentUrl.includes('/oauth2' || currentUrl.includes('kakao')) ||
    currentUrl.includes('oauth')
  ) {
    console.log('바로 넘겨 주세요')
    fetch(event.request)
    return
  }

  // Directly fetch the request if it includes /img/404error.jpg or if it's an API request
  if (checkurl.includes('/api') || checkurl.includes('/oauth/')) {
    console.log('checkurl에 api oauth 들어있음')
    event.respondWith(fetch(event.request))
    // const newRequest = new Request(event.request, {referrer: 'your-new-referrer-url'});
    // event.respondWith(fetch(newRequest));
    return
  }

  // console.log(currentUrl.includes('/oauth2'))

  // if (currentUrl.includes('/oauth2')) {
  //   console.log('현재 url에 /oauth2 들어있음')
  //   // const newRequest = new Request(event.request, {referrer: 'oauth2/authorization/kakao'});
  //   // console.log('newRequest', newRequest)
  //   // event.respondWith(fetch(newRequest));
  //   return;
  // }

  // For other requests, follow the cache-then-network strategy
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      if (cachedResponse) {
        return cachedResponse
      }
      return fetch(event.request)
    })
  )
})
